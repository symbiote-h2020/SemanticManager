
// initial extensions to gradle
buildscript {
    ext {
        springBootVersion = '1.5.2.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath group: 'com.cinnober.gradle', name: 'semver-git', version: '2.2.1'
        classpath 'org.owasp:dependency-check-gradle:1.4.5.1'
    }
}

// code
apply plugin: 'java'
apply plugin: 'org.springframework.boot'

// code quality
apply plugin: 'jacoco'
apply plugin: 'org.owasp.dependencycheck'

// IDEs
apply plugin: 'eclipse'
apply plugin: 'idea'

// publishing
apply plugin: 'com.cinnober.gradle.semver-git'

// XXX please change with your commits according to http://semver.org/
project.version = '0.2.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

// dependencies section
repositories {
    mavenCentral()
    maven {
        url "https://jitpack.io"
    }
    maven {
        url 'https://maven.man.poznan.pl/repository/kiwi-repo'
    }
}

// Spring related configs
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Camden.SR6"
    }
}

/*
Forces dependencies' cache invalidation for each build for dependencies marked with
    { changing = true }
    e.g.
    compile('com.github.symbiote-h2020:SymbIoTeLibraries:develop-SNAPSHOT'){ changing = true }
 */
configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    compile('org.apache.jena:jena-core:3.4.0')
    compile('org.apache.jena:jena-querybuilder:3.4.0')
	compile('org.apache.jena:jena-cmds:3.4.0') {
        exclude group: 'org.slf4j'
    }

    compile('eu.symbiote-h2020:MediationFramework:1.0')

    /* SymbIoTeLibraries manual:
        One can use the library from jitpack by default with the notation:
            compile('com.github.symbiote-h2020:SymbIoTeLibraries:develop-SNAPSHOT') {changing = true }
        or having cloned locally the SymbIoTeLibraries repo use it directly with project dependency by:
            compile project(':SymbIoTeLibraries')
        Important --- In order to use the latter you need to:
            1) switch comments on the artifact and project dependencies
            2) always have only one uncommented
            3) project dependency requires changes in settings.gradle file in this project
            4) never commit build.gradle which has project dependencies active as it will break CI builds
    */

    //compile project(':SymbIoTeLibraries')
    compile('com.github.symbiote-h2020:SymbIoTeLibraries:develop-SNAPSHOT') { changing=true }

    //Just to generate object ids
//    compile('org.springframework.boot:spring-boot-starter-data-mongodb')
    compile('org.mongodb:bson:3.4.2')

    // Spring
    compile('org.springframework.cloud:spring-cloud-starter')
    compile('org.springframework.cloud:spring-cloud-starter-config')
    compile('org.springframework.cloud:spring-cloud-starter-eureka')
    compile('org.springframework.cloud:spring-cloud-starter-zipkin')
    compile('org.springframework.boot:spring-boot-starter-amqp')
    compile('org.springframework.boot:spring-boot-starter-data-rest')
    compile('org.springframework.boot:spring-boot-starter-web')

    // tests only
    testCompile('junit:junit:4.+')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

// code quality below
task generateJavaDocs(type: Javadoc) {
    source = sourceSets.main.allJava
    destinationDir = reporting.file("javadocs")
}

// jacoco configuration section
jacoco {
    toolVersion = "0.7.9"
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

// owasp config
dependencyCheck {
    outputDirectory = "$project.buildDir/reports/security"
}

// including code quality extensions into the build
check.dependsOn(jacocoTestReport, 'dependencyCheck')

// Eureka needs to be disabled for testing
tasks.withType(Test) {
    systemProperty 'eureka.client.enabled', 'false'
}

// automatically create ontology classes
def generatedSourcesFolder = "generated-src";
def ontologyDir = "src/main/resources/ontologies"
def ontologyDirShort = "/ontologies"
def ontologyPackage = "eu.h2020.symbIoTe.ontology"
def ontologyFileExtensions= ["**/*.rdf", "**/*.owl", "**/*.ttl", "**/*.n3"]

import static org.apache.tools.ant.taskdefs.condition.Os.*

task generateOntologies {
    description = 'Generate Ontology Classes'
    fileTree(dir: ontologyDir, include: ontologyFileExtensions).each { file ->
        doLast {
            javaexec {
                classpath sourceSets.main.runtimeClasspath
                main = 'jena.schemagen'
                if( isFamily(FAMILY_WINDOWS) ) {
                    args = ["-i", "$ontologyDir/$file.name", "-o", generatedSourcesFolder, "--package", ontologyPackage, "--nocomments", "--ontology", "--nostrict", "--declarations", "    public static final URL SOURCE_PATH = MethodHandles.lookup().lookupClass().getResource(\"\"$ontologyDirShort/$file.name\"\");", "--header", "%package%\n%imports%\nimport java.net.URL;\nimport java.lang.invoke.MethodHandles;\n"]
                } else if( isFamily(FAMILY_UNIX) || isFamily(FAMILY_MAC) ) {
                    args = ["-i", "$ontologyDir/$file.name", "-o", generatedSourcesFolder, "--package", ontologyPackage, "--nocomments", "--ontology", "--nostrict", "--declarations", "    public static final URL SOURCE_PATH = MethodHandles.lookup().lookupClass().getResource(\"$ontologyDirShort/$file.name\");", "--header", "%package%\n%imports%\nimport java.net.URL;\nimport java.lang.invoke.MethodHandles;\n"]
                }
            }
        }
    }
    sourceSets {
        main {
            java.srcDirs generatedSourcesFolder
        }
        test {
            java.srcDirs generatedSourcesFolder
        }
    }
}

clean {
    delete generatedSourcesFolder
}

compileTestJava.dependsOn generateOntologies
compileJava.dependsOn generateOntologies
